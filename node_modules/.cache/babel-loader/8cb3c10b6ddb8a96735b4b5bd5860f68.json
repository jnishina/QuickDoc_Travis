{"ast":null,"code":"import _classCallCheck from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { Generic } from \"../../base\";\nimport { combineRefs } from \"../../utils\";\nimport { NavbarItemContext } from \"./navbar-item-context\";\nexport var NavbarItemContainer =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(NavbarItemContainer, _React$PureComponent);\n\n  function NavbarItemContainer(props) {\n    var _this;\n\n    _classCallCheck(this, NavbarItemContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NavbarItemContainer).call(this, props));\n    _this.ref = React.createRef();\n\n    _this.handleDocumentClick = function (event) {\n      if (_this.props.managed !== true && _this.active && _this.ref.current !== null) {\n        if (event.target instanceof Element && !_this.ref.current.contains(event.target)) {\n          _this.active = false;\n        }\n      }\n    };\n\n    _this.handleOnClick = function (ctx) {\n      return function (event) {\n        if (_this.props.onClick !== undefined) {\n          _this.props.onClick(event);\n        }\n\n        ctx.setActive(!ctx.active);\n      };\n    };\n\n    _this.state = {\n      active: props.active === true\n    };\n    return _this;\n  }\n\n  _createClass(NavbarItemContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.dropdown === true) {\n        document.addEventListener(\"click\", this.handleDocumentClick);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(\"click\", this.handleDocumentClick);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          as = _a.as,\n          active = _a.active,\n          initialClassName = _a.className,\n          dropdown = _a.dropdown,\n          expanded = _a.expanded,\n          hoverable = _a.hoverable,\n          innerRef = _a.innerRef,\n          managed = _a.managed,\n          onClick = _a.onClick,\n          tab = _a.tab,\n          up = _a.up,\n          rest = tslib_1.__rest(_a, [\"as\", \"active\", \"className\", \"dropdown\", \"expanded\", \"hoverable\", \"innerRef\", \"managed\", \"onClick\", \"tab\", \"up\"]);\n\n      var className = classNames(\"navbar-item\", {\n        \"has-dropdown\": dropdown,\n        \"has-dropdown-up\": up,\n        \"is-active\": this.active,\n        \"is-expanded\": expanded,\n        \"is-hoverable\": hoverable,\n        \"is-tab\": tab\n      }, initialClassName);\n      var ref = combineRefs(this.ref, innerRef);\n\n      if (dropdown === true) {\n        var asOverride = as === \"a\" ? \"div\" : as;\n        return React.createElement(NavbarItemContext.Provider, {\n          value: {\n            active: this.active,\n            setActive: function setActive(value) {\n              return _this2.active = value;\n            }\n          }\n        }, React.createElement(Generic, Object.assign({\n          as: asOverride,\n          className: className,\n          ref: ref\n        }, rest)));\n      }\n\n      return React.createElement(NavbarItemContext.Consumer, null, function (ctx) {\n        return React.createElement(Generic, Object.assign({\n          as: as,\n          className: className,\n          onClick: _this2.handleOnClick(ctx),\n          ref: ref\n        }, rest));\n      });\n    }\n  }, {\n    key: \"active\",\n    get: function get() {\n      return this.props.managed === true ? this.props.active === true : this.state.active;\n    },\n    set: function set(value) {\n      if (this.props.managed !== true) {\n        this.setState({\n          active: value\n        });\n      }\n    }\n  }]);\n\n  return NavbarItemContainer;\n}(React.PureComponent);\nNavbarItemContainer.displayName = \"Navbar.Item.Container\";","map":null,"metadata":{},"sourceType":"module"}