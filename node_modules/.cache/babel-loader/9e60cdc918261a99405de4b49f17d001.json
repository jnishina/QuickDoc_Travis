{"ast":null,"code":"import _defineProperty from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { SelectOption } from \"./select-option\";\nexport var SELECT_CONTAINER_DEFAULTS = {\n  sizes: [\"small\", \"medium\", \"large\"],\n  states: [\"focused\", \"hovered\", \"loading\"]\n};\n\nvar mapSelectContainerChildren = function mapSelectContainerChildren(children, state) {\n  var classNameExtension;\n  var mapped = React.Children.map(children, function (child, i) {\n    if (typeof child === \"object\" && child !== null && \"type\" in child) {\n      if (child.type === \"select\" || child.type === Select) {\n        classNameExtension = classNames({\n          \"is-multiple\": child.props.multiple\n        });\n\n        if (state === \"focused\" || state === \"hovered\") {\n          return React.cloneElement(child, {\n            className: classNames(\"is-\".concat(state), child.props.className)\n          });\n        }\n\n        return child;\n      } else if (child.type === React.Fragment) {\n        var fragmentMapped = mapSelectContainerChildren(child.props.children, state);\n        classNameExtension = classNames(classNameExtension, fragmentMapped.classNameExtension);\n        return React.createElement(React.Fragment, {\n          children: fragmentMapped.children\n        });\n      }\n    }\n\n    return child;\n  });\n  return {\n    children: mapped,\n    classNameExtension: classNameExtension\n  };\n};\n\nexport var SelectContainer = forwardRefAs(function (_a, ref) {\n  var _classNames;\n\n  var className = _a.className,\n      children = _a.children,\n      color = _a.color,\n      fullwidth = _a.fullwidth,\n      rounded = _a.rounded,\n      size = _a.size,\n      state = _a.state,\n      rest = tslib_1.__rest(_a, [\"className\", \"children\", \"color\", \"fullwidth\", \"rounded\", \"size\", \"state\"]);\n\n  var mapped = mapSelectContainerChildren(children, state);\n  return React.createElement(Generic, Object.assign({\n    className: classNames(\"select\", (_classNames = {}, _defineProperty(_classNames, \"is-\".concat(color), color), _defineProperty(_classNames, \"is-fullwidth\", fullwidth), _defineProperty(_classNames, \"is-loading\", state === \"loading\"), _defineProperty(_classNames, \"is-rounded\", rounded), _defineProperty(_classNames, \"is-\".concat(size), size), _classNames), mapped.classNameExtension, className),\n    children: mapped.children,\n    ref: ref\n  }, rest));\n}, {\n  as: \"div\"\n});\nSelectContainer.displayName = \"Select.Container\";\nSelectContainer.propTypes = {\n  color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  fullwidth: PropTypes.bool,\n  rounded: PropTypes.bool,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  state: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nexport var Select = Object.assign(forwardRefAs(function (props, ref) {\n  return React.createElement(Generic, Object.assign({\n    ref: ref\n  }, props));\n}, {\n  as: \"select\"\n}), {\n  Container: SelectContainer,\n  Option: SelectOption\n});\nSelect.displayName = \"Select\";","map":null,"metadata":{},"sourceType":"module"}