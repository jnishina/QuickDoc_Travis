{"ast":null,"code":"import _classCallCheck from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { Generic } from \"../../base\";\nimport { initialValue, ModalContext } from \"./modal-context\";\nexport var ModalPortal =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ModalPortal, _React$PureComponent);\n\n  function ModalPortal() {\n    var _this;\n\n    _classCallCheck(this, ModalPortal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModalPortal).apply(this, arguments));\n\n    _this.close = function () {\n      if (_this.props.onClose !== undefined) {\n        _this.props.onClose();\n      }\n    };\n\n    _this.handleKeydown = function (event) {\n      if (_this.props.closeOnEsc === true && event.code === \"Escape\") {\n        _this.close();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ModalPortal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          clipped = _this$props.clipped,\n          document = _this$props.document;\n      document.addEventListener(\"keydown\", this.handleKeydown);\n      var html = document.querySelector(\"html\");\n\n      if (html !== null) {\n        if (clipped === true) {\n          html.classList.add(\"is-clipped\");\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var document = this.props.document;\n      document.removeEventListener(\"keydown\", this.handleKeydown);\n      var html = document.querySelector(\"html\");\n\n      if (html !== null) {\n        html.classList.remove(\"is-clipped\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          closeOnBlur = _a.closeOnBlur,\n          closeOnEsc = _a.closeOnEsc,\n          innerRef = _a.innerRef,\n          onClose = _a.onClose,\n          rest = tslib_1.__rest(_a, [\"className\", \"closeOnBlur\", \"closeOnEsc\", \"innerRef\", \"onClose\"]);\n\n      return React.createElement(ModalContext.Provider, {\n        value: {\n          close: this.close,\n          closeOnBlur: closeOnBlur === true,\n          closeOnEsc: closeOnEsc === true\n        }\n      }, React.createElement(Generic, Object.assign({\n        className: classNames(\"modal\", \"is-active\", className),\n        ref: innerRef\n      }, rest)));\n    }\n  }]);\n\n  return ModalPortal;\n}(React.PureComponent);\nModalPortal.defaultProps = {\n  closeOnBlur: initialValue.closeOnBlur,\n  closeOnEsc: initialValue.closeOnEsc\n};\nModalPortal.displayName = \"Modal.Portal\";","map":null,"metadata":{},"sourceType":"module"}