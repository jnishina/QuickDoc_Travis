{"ast":null,"code":"import _defineProperty from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { Generic } from \"../../base\";\nimport { canUseDOM } from \"../../utils\";\nimport { NavbarContext } from \"./navbar-context\";\nexport var NAVBAR_DEFAULTS = {\n  fixedAlignments: [\"top\", \"bottom\"]\n};\nexport var NavbarContainer =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(NavbarContainer, _React$PureComponent);\n\n  function NavbarContainer(props) {\n    var _this;\n\n    _classCallCheck(this, NavbarContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NavbarContainer).call(this, props));\n    _this.state = {\n      active: props.active === true\n    };\n    return _this;\n  }\n\n  _createClass(NavbarContainer, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var fixed = this.props.fixed;\n      var html = this.document.querySelector(\"html\");\n\n      if (html !== null) {\n        html.classList.remove(\"has-navbar-fixed-\".concat(fixed));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n          _classNames;\n\n      this.manageHtmlAttributes();\n\n      var _a = this.props,\n          active = _a.active,\n          className = _a.className,\n          color = _a.color,\n          fixed = _a.fixed,\n          innerRef = _a.innerRef,\n          managed = _a.managed,\n          transparent = _a.transparent,\n          rest = tslib_1.__rest(_a, [\"active\", \"className\", \"color\", \"fixed\", \"innerRef\", \"managed\", \"transparent\"]);\n\n      return React.createElement(NavbarContext.Provider, {\n        value: {\n          active: this.active,\n          setActive: function setActive(value) {\n            _this2.active = value;\n          }\n        }\n      }, React.createElement(Generic, Object.assign({\n        className: classNames(\"navbar\", (_classNames = {\n          \"is-transparent\": transparent\n        }, _defineProperty(_classNames, \"is-fixed-\".concat(fixed), fixed), _defineProperty(_classNames, \"is-\".concat(color), color), _classNames), className),\n        ref: innerRef,\n        role: \"navigation\"\n      }, rest)));\n    }\n  }, {\n    key: \"manageHtmlAttributes\",\n    value: function manageHtmlAttributes() {\n      if (canUseDOM()) {\n        var html = this.document.querySelector(\"html\");\n\n        if (html !== null) {\n          html.classList.remove(\"has-navbar-fixed-top\");\n          html.classList.remove(\"has-navbar-fixed-bottom\");\n\n          if (this.props.fixed !== undefined) {\n            html.classList.add(\"has-navbar-fixed-\".concat(this.props.fixed));\n          }\n        }\n      }\n    }\n  }, {\n    key: \"active\",\n    get: function get() {\n      return this.props.managed === true ? this.props.active === true : this.state.active;\n    },\n    set: function set(value) {\n      if (this.props.managed !== true) {\n        this.setState({\n          active: value\n        });\n      }\n    }\n  }, {\n    key: \"document\",\n    get: function get() {\n      return this.props.document !== undefined ? this.props.document : document;\n    }\n  }]);\n\n  return NavbarContainer;\n}(React.PureComponent);\nNavbarContainer.defaultProps = {\n  transparent: false\n};\nNavbarContainer.displayName = \"Navbar.Container\";","map":null,"metadata":{},"sourceType":"module"}