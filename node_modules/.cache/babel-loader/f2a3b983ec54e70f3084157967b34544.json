{"ast":null,"code":"import _defineProperty from \"/Users/jordanmitsutakanishina/Documents/GitHub/QuickDoc_Travis/quick_doc/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory } from \"./factory\";\nexport var makeResponsiveBreakpointPropTypes = makePropTypesFactory(function (vars) {\n  return {\n    display: PropTypes.shape({\n      only: PropTypes.bool,\n      value: PropTypes.oneOf(vars.displays).isRequired\n    }),\n    hide: PropTypes.shape({\n      only: PropTypes.bool,\n      value: PropTypes.bool.isRequired\n    }),\n    textAlign: PropTypes.shape({\n      only: PropTypes.bool,\n      value: PropTypes.oneOf(vars.textAlignments).isRequired\n    }),\n    textSize: PropTypes.shape({\n      only: PropTypes.bool,\n      value: PropTypes.oneOf(vars.textSizes).isRequired\n    })\n  };\n});\nexport var makeResponsiveBreakpointLimitedPropTypes = makePropTypesFactory(function (vars) {\n  return {\n    display: PropTypes.shape({\n      value: PropTypes.oneOf(vars.displays).isRequired\n    }),\n    hide: PropTypes.shape({\n      value: PropTypes.bool.isRequired\n    }),\n    textAlign: PropTypes.shape({\n      value: PropTypes.oneOf(vars.textAlignments).isRequired\n    }),\n    textSize: PropTypes.shape({\n      value: PropTypes.oneOf(vars.textSizes).isRequired\n    })\n  };\n});\nexport var makePropTypes = makePropTypesFactory(function (vars) {\n  return {\n    responsive: PropTypes.shape(vars.breakpoints.map(function (breakpoint) {\n      return _defineProperty({}, breakpoint, PropTypes.shape(vars.breakpointsLimited.indexOf(breakpoint) === -1 ? makeResponsiveBreakpointPropTypes(vars) : makeResponsiveBreakpointLimitedPropTypes(vars)));\n    }).reduce(function (acc, cv) {\n      return Object.assign({}, acc, cv);\n    }, {}))\n  };\n});\nexport var transform = function transform(props) {\n  var className = props.className,\n      responsive = props.responsive,\n      rest = tslib_1.__rest(props, [\"className\", \"responsive\"]);\n\n  return Object.assign({\n    className: classNames(responsive !== undefined ? Object.keys(responsive).filter(function (breakpoint) {\n      return responsive[breakpoint] !== undefined;\n    }).map(function (breakpoint) {\n      var names = {};\n      var _responsive$breakpoin = responsive[breakpoint],\n          display = _responsive$breakpoin.display,\n          hide = _responsive$breakpoin.hide,\n          textAlign = _responsive$breakpoin.textAlign,\n          textSize = _responsive$breakpoin.textSize;\n\n      if (display !== undefined) {\n        var value = display.value;\n        var only = \"only\" in display ? display.only === true : false;\n        names[\"is-\".concat(value, \"-\").concat(breakpoint).concat(only ? \"-only\" : \"\")] = value;\n      }\n\n      if (hide !== undefined) {\n        var _value = hide.value;\n\n        var _only = \"only\" in hide ? hide.only === true : false;\n\n        names[\"is-hidden-\".concat(breakpoint).concat(_only ? \"-only\" : \"\")] = _value;\n      }\n\n      if (textAlign !== undefined) {\n        var _value2 = textAlign.value;\n\n        var _only2 = \"only\" in textAlign ? textAlign.only === true : false;\n\n        names[\"has-text-\".concat(_value2, \"-\").concat(breakpoint).concat(_only2 ? \"-only\" : \"\")] = _value2;\n      }\n\n      if (textSize !== undefined) {\n        var _value3 = textSize.value;\n\n        var _only3 = \"only\" in textSize ? textSize.only === true : false;\n\n        names[\"is-size-\".concat(_value3, \"-\").concat(breakpoint).concat(_only3 ? \"-only\" : \"\")] = _value3;\n      }\n\n      return names;\n    }).reduce(function (acc, cv) {\n      return Object.assign({}, acc, cv);\n    }, {}) : undefined, className)\n  }, rest);\n};\nexport var makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);","map":null,"metadata":{},"sourceType":"module"}